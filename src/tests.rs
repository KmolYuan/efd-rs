#![doc(hidden)]
#[cfg(test)]
use core::f64::consts::TAU;

/// Epsilon for curve difference.
pub const EPS: f64 = 2.2e-14;
pub const RES: usize = 1000;

#[test]
fn error() {
    use crate::*;
    let coeff = Coeff2::from_column_slice(&[10., 20., 20., 10., 3., 4., 4., 3.]);
    let a = Efd2::try_from_coeffs_unnorm(coeff).unwrap();
    let coeff = Coeff2::from_column_slice(&[10., 20., 20., 10.]);
    let b = Efd2::try_from_coeffs_unnorm(coeff).unwrap();
    assert_eq!(a.square_err(&b), 50.);
    assert_eq!(b.square_err(&a), 50.);
}

#[test]
fn efd2d() {
    use crate::*;
    use alloc::vec::Vec;
    use approx::assert_abs_diff_eq;
    let efd = Efd2::from_curve(PATH, false);
    // Test starting point
    let path = PATH
        .iter()
        .cycle()
        .skip(0)
        .take(PATH.len())
        .copied()
        .collect::<Vec<_>>();
    let efd_half = Efd2::from_curve(path, false);
    assert!(efd.l1_norm(&efd_half) < EPS);
    // Test transformation
    let trans = efd.as_trans();
    assert_abs_diff_eq!(trans.trans()[0], -1.248409055632358);
    assert_abs_diff_eq!(trans.trans()[1], 55.26080122817753);
    assert_abs_diff_eq!(trans.rot().angle(), 0.6423416350347734);
    assert_abs_diff_eq!(trans.scale(), 48.16765830752243);
    assert_eq!(efd.harmonic(), 6);
    // Test normalized
    let norm = efd.generate_norm_in(NORM.len(), TAU);
    assert!(curve_diff(&norm, NORM) < EPS);
    // Test reconstruction
    let target = efd.generate(TARGET.len());
    assert!(curve_diff(&target, TARGET) < EPS);
}

#[test]
fn efd3d() {
    use crate::*;
    use alloc::vec::Vec;
    use approx::assert_abs_diff_eq;
    let efd = Efd3::from_curve(PATH3D, false);
    // Test starting point
    let path = PATH3D
        .iter()
        .cycle()
        .skip(PATH3D.len() / 2)
        .take(PATH3D.len())
        .copied()
        .collect::<Vec<_>>();
    let efd_half = Efd3::from_curve(path, false);
    assert!(efd.l1_norm(&efd_half) < EPS);
    // Test transformation
    let trans = efd.as_trans();
    assert_abs_diff_eq!(trans.trans()[0], 0.7239345388499508);
    assert_abs_diff_eq!(trans.trans()[1], 0.09100107896533066);
    assert_abs_diff_eq!(trans.trans()[2], 0.49979194975846675);
    assert_abs_diff_eq!(trans.rot().angle(), 2.9160714030359416);
    assert_abs_diff_eq!(trans.scale(), 0.5629099155595344);
    assert_eq!(efd.harmonic(), 5);
    // Test normalized
    let norm = efd.generate_norm_in(NORM3D.len(), TAU);
    assert!(curve_diff(&norm, NORM3D) < EPS);
    // Test reconstruction
    let target = efd.generate(NORM3D.len());
    assert!(curve_diff(&target, TARGET3D) < EPS);
}

#[test]
#[cfg(feature = "std")]
fn plot() -> Result<(), Box<dyn std::error::Error>> {
    use crate::*;
    use plotters::prelude::*;

    pub fn bounding_box<'a>(pts: impl IntoIterator<Item = &'a [f64; 2]>) -> [f64; 4] {
        let [mut x_min, mut x_max] = [&f64::INFINITY, &-f64::INFINITY];
        let [mut y_min, mut y_max] = [&f64::INFINITY, &-f64::INFINITY];
        for [x, y] in pts {
            if x < x_min {
                x_min = x;
            }
            if x > x_max {
                x_max = x;
            }
            if y < y_min {
                y_min = y;
            }
            if y > y_max {
                y_max = y;
            }
        }
        let dx = (x_max - x_min).abs();
        let dy = (y_max - y_min).abs();
        if dx > dy {
            let cen = (y_min + y_max) * 0.5;
            let r = dx * 0.5;
            [*x_min, *x_max, cen - r, cen + r]
        } else {
            let cen = (x_min + x_max) * 0.5;
            let r = dy * 0.5;
            [cen - r, cen + r, *y_min, *y_max]
        }
    }

    let coeff =
        Coeff2::from_column_slice(&[12., 35., 35., 13., 5., 21., 21., 5., 1., 12., 12., 1.]);
    let efd = Efd2::try_from_coeffs(coeff).unwrap();
    let path = efd.generate(360);
    let [x_min, x_max, y_min, y_max] = bounding_box(&path);
    let b = SVGBackend::new("test.svg", (1200, 1200));
    let root = b.into_drawing_area();
    root.fill(&WHITE)?;
    let mut chart = ChartBuilder::on(&root)
        .set_label_area_size(LabelAreaPosition::Left, (8).percent())
        .set_label_area_size(LabelAreaPosition::Bottom, (4).percent())
        .margin((8).percent())
        .build_cartesian_2d(x_min..x_max, y_min..y_max)?;
    let p0 = path[0];
    chart.draw_series([Circle::new((p0[0], p0[1]), 3, BLACK.filled())])?;
    for (p, color) in [((10., 0.), RED), ((0., 10.), BLUE)] {
        chart.draw_series(LineSeries::new([(0., 0.), p], color.stroke_width(10)))?;
    }
    let trans0 = efd.as_trans();
    let mut c0 = [0.; 2];
    for m in efd.coeffs_iter() {
        let trans = trans0 * Transform2::new(c0, na::UnitComplex::new(0.), 1.);
        let ellipse = (0..100)
            .map(|i| {
                let t = i as f64 * std::f64::consts::TAU / 100.;
                let v = na::matrix![t.cos(), t.sin()] * m;
                [v[0], v[1]]
            })
            .map(|[x, y]| {
                let [x, y] = trans.transform_pt(&[x, y]);
                (x, y)
            });
        let p1 = c0;
        c0[0] += m[(0, 0)];
        c0[1] += m[(1, 0)];
        let p2 = c0;
        let [x1, y1] = trans0.transform_pt(&p1);
        let [x2, y2] = trans0.transform_pt(&p2);
        chart.draw_series([Circle::new((x2, y2), 5, RED.filled())])?;
        chart.draw_series(LineSeries::new([(x1, y1), (x2, y2)], RED.stroke_width(5)))?;
        chart.draw_series(LineSeries::new(ellipse, RED.stroke_width(7)))?;
    }
    chart.draw_series(LineSeries::new(
        path.into_iter().map(|[x, y]| (x, y)),
        BLACK.stroke_width(10),
    ))?;
    Ok(())
}

pub const PATH: &[[f64; 2]] = &[
    [14.928108089437242, 90.01002059789568],
    [-3.25371009238094, 85.46456605244113],
    [-16.763462931659024, 76.52439024390245],
    [-39.6173464560173, 57.055475143350215],
    [-49.46583130450215, 35.085778173653246],
    [-27.739072687756586, 14.939024390243903],
    [-2.117346456017304, 19.17668726456234],
    [17.958411119740273, 37.7372933251684],
    [26.291744453073605, 57.81305090092597],
    [43.71598687731603, 68.41911150698658],
    [47.12507778640693, 80.5403236281987],
    [38.41295657428572, 90.38880847668355],
    [27.80689596822512, 91.1463842342593],
];
pub const NORM: &[[f64; 2]] = &[
    [1.119379152671337, -0.055532346473869454],
    [1.0018506232663766, 0.1823784504937611],
    [0.7687896073161198, 0.33384410950902793],
    [0.5297537083948306, 0.4494952893425931],
    [0.271186490768574, 0.5322465667898876],
    [-0.00920352785888767, 0.544348954026052],
    [-0.2743716739614561, 0.528196727238997],
    [-0.5433078077809189, 0.5046430137160407],
    [-0.8149807140104538, 0.4204544095243717],
    [-0.9955875057117208, 0.25347571439916705],
    [-1.0282669109936744, 0.018301320499462467],
    [-0.948318866023551, -0.24675955972365526],
    [-0.7815923127852239, -0.44688770099127917],
    [-0.5386897245268578, -0.5378819281433578],
    [-0.2650638989744659, -0.57511087303953],
    [0.00027094874287129575, -0.5510645822452839],
    [0.24951638905546902, -0.4292296881016248],
    [0.4916538852699887, -0.32627748782480726],
    [0.7554038709137739, -0.32628252495544324],
    [1.0115782662278692, -0.27235786404051016],
];
pub const TARGET: &[[f64; 2]] = &[
    [43.525805419361156, 85.4197400390812],
    [32.127881631564705, 91.20399987112047],
    [18.768597868065594, 90.32048387107503],
    [6.212336042887124, 87.88327839462477],
    [-6.147845898947624, 83.61360860038272],
    [-17.311044076897222, 75.98946346438477],
    [-27.07185879742481, 67.71484616233501],
    [-36.76441926610793, 59.04604254215848],
    [-44.812856391533664, 47.95972407232451],
    [-46.96010883252019, 36.3081839990284],
    [-41.434307484394736, 26.29507611327863],
    [-30.70233318622691, 18.37928389264021],
    [-18.49721158501726, 15.471863870523464],
    [-6.503319261298004, 18.97160587352827],
    [5.1240494958824065, 25.431492873929617],
    [14.66350320725614, 34.01537568414478],
    [20.760649131627297, 45.906456961136165],
    [27.12853569388979, 56.864171763699666],
    [37.30088768605805, 64.47471971770891],
    [45.62487749112895, 73.94660679644548],
];
#[rustfmt::skip]
pub const PATH_OPEN: &[[f64; 2]] = &[
    [0.028607755880487345, 47.07692307692308],
    [6.182453909726641, 52.76923076923077],
    [14.797838525111256, 57.07692307692308],
    [24.643992371265103, 58.61538461538461],
    [41.10553083280357, 59.07692307692308],
    [50.18245390972664, 56.76923076923077],
    [60.6439923712651, 51.53846153846154],
    [65.41322314049587, 46.0],
    [68.79783852511126, 36.92307692307692],
    [67.41322314049587, 25.384615384615383],
    [60.6439923712651, 18.153846153846153],
];
#[rustfmt::skip]
pub const PATH3D: &[[f64; 3]] = &[
    [0.6999100262927096,0.43028119112952473,0.5700737247541725],
    [0.6296590344074013,0.4512760872295425,0.6323601770225047],
    [0.5638138739696974,0.46183051089148464,0.6847090584540213],
    [0.5058369206546075,0.4615280764519245,0.7287803814245077],
    [0.45702863707701546,0.4510622388540364,0.7665948614304103],
    [0.41723197726966244,0.4317766784472379,0.799678921250722],
    [0.3856541747672426,0.40523683682222406,0.8288871838597307],
    [0.3614034251971859,0.3729768425814701,0.8545617819407205],
    [0.3437381466626122,0.33639334903869056,0.8767460300745514],
    [0.3321447389761846,0.29671906154191235,0.8953422088163436],
    [0.3263372629749841,0.25502826620566654,0.9102002934684913],
    [0.32622858809088523,0.21225076122841705,0.9211539082423659],
    [0.3318929803861661,0.16918542545203516,0.928021196624841],
    [0.34352480290022414,0.1265118028240236,0.9305834049340109],
    [0.36139084538662236,0.08480105307198857,0.9285501808026447],
    [0.38577056486989364,0.04452862638492877,0.9215195454857344],
    [0.41687739559371884,0.0060909757379047635,0.9089423177834546],
    [0.45475516434546037,-0.030172412132808968,0.8901052556002697],
    [0.49914754370187137,-0.06395289690096129,0.8641537806399759],
    [0.5493470560271839,-0.09494849409160033,0.8301822664355119],
    [0.6040449685807827,-0.1228552958162816,0.7874238072487618],
    [0.6612249903953387,-0.14739768525858138,0.7355647044666407],
    [0.7181712990997067,-0.1684251622294386,0.6751762361616609],
    [0.7716940290779204,-0.18608109658863914,0.6081629312757029],
    [0.8186957920221034,-0.20095221972437277,0.5379176568148215],
    [0.8570911228971989,-0.21393997152327254,0.46864111603170266],
    [0.88661962597743,-0.2256744734813517,0.403703691896119],
    [0.9087058112647335,-0.2359493070484034,0.3443568978212587],
    [0.9253987983439792,-0.24384980367577586,0.29012813939844717],
    [0.9384640530551117,-0.24830445184260166,0.24006274246229356],
    [0.9491216566898215,-0.2484529388271337,0.19349216519158882],
    [0.9581400770939057,-0.2437369857356437,0.1501994489037393],
    [0.9659871776934699,-0.2338686278496317,0.11033692690815355],
    [0.9729414021915203,-0.21877677851516128,0.07430847249221559],
    [0.979158591144934,-0.1985626427303512,0.04267704651223003],
    [0.984708076435491,-0.17346680001041803,0.0161019718314504],
    [0.9895891445905367,-0.1438444290548901,-0.004701610196814504],
    [0.9937341248474196,-0.11014503640716575,-0.01898841932855333],
    [0.997000753888979,-0.07289400668205587,-0.02599924103976281],
    [0.9991540450179144,-0.03267407497300495,-0.024971967263275538],
    [0.9998362404365794,0.009894685600921771,-0.015152145277328999],
    [0.9985225360959517,0.05417737861443478,0.004190054292864898],
    [0.9944609178696164,0.09954962956012486,0.03372468064136638],
    [0.9865989401537969,0.14542428454053347,0.07398857177482451],
    [0.9735136458469561,0.19127348741773503,0.12524230260109778],
    [0.9533914378420906,0.2366305939786505,0.18721839718014333],
    [0.9241589851285424,0.2810406966408692,0.25873982499375203],
    [0.8839235581077262,0.32391579444519214,0.33727985639690555],
    [0.8318395864591331,0.36427712952733915,0.4187422540212782],
    [0.7691918202384619,0.4004903064827955,0.49794724428553494],
];
#[rustfmt::skip]
pub const NORM3D: &[[f64; 3]] = &[
    [1.050227461832115, -0.0005073577983771586, -0.13398960704180335],
    [1.0412540129385615, 0.09029968289741912, -0.13085499005817944],
    [1.016231177659747, 0.17680234756390176, -0.12203382922369319],
    [0.9766339090002657, 0.255660893401197, -0.10792456493783331],
    [0.9245544963572528, 0.32457367935463505, -0.08917909430814493],
    [0.8623794345551381, 0.38243598920810046, -0.06669601896978017],
    [0.7924592587484308, 0.42926606283181296, -0.04158879459084998],
    [0.7168399689201572, 0.46593636979782044, -0.015120979656888927],
    [0.6371055477401775, 0.4937915517944074, 0.011390308267431237],
    [0.554350512929501, 0.5142557938386675, 0.036691094682575295],
    [0.46926762661365057, 0.5285266924575086, 0.05970689424431205],
    [0.3823077370943349, 0.5374220780657173, 0.07963399711807885],
    [0.29385356368388016, 0.5413993160610231, 0.09598340228870991],
    [0.20435081736725688, 0.5407161678088511, 0.10856424526102491],
    [0.11435760651347059, 0.5356619838493002, 0.11740762349376242],
    [0.024501508210787337, 0.526768705839974, 0.12264730375854706],
    [-0.06463507380418512, 0.5149181026034295, 0.12438676771883334],
    [-0.15265546999404708, 0.5012930400296506, 0.12258862341224766],
    [-0.23945762152679737, 0.4871679598892325, 0.11702018653952577],
    [-0.3252589582848297, 0.47358427519872776, 0.10727776044000906],
    [-0.4105064551484882, 0.4609961816012008, 0.09289391352589733],
    [-0.4956733677949833, 0.4489901530755625, 0.07351092267594887],
    [-0.5809788097123093, 0.4361714890370976, 0.049084609980011976],
    [-0.6660938955748359, 0.4202752724481208, 0.020070934433386627],
    [-0.7499107531341641, 0.398505471049025, -0.01245365192646368],
    [-0.8304440703596739, 0.3680479811476683, -0.046776855611343086],
    [-0.9049096374679494, 0.3266559494323924, -0.08065888432357252],
    [-0.9699860339815255, 0.2731811611205287, -0.11155736464469132],
    [-1.0222232106330968, 0.20793054841351516, -0.13693591479490252],
    [-1.0585255603398118, 0.1327614614947151, -0.15460357396004643],
    [-1.0766162296141732, 0.05088541614738363, -0.16302307916128236],
    [-1.075389386700431, -0.033585691685537974, -0.16152983636153329],
    [-1.055078429001687, -0.11625985325461426, -0.15041979427963534],
    [-1.0172059904871134, -0.1931245079111103, -0.13088986463376845],
    [-0.964327345999266, -0.2611115676394389, -0.1048435091192442],
    [-0.8996217273453561, -0.3184582397715154, -0.07460027732234584],
    [-0.8264161924904684, -0.36480271373290224, -0.042565731093078936],
    [-0.7477372015816882, -0.40101490392032085, -0.010923602669819753],
    [-0.6659739330661609, -0.4288209601150168, 0.01859570328189836],
    [-0.582707848902367, -0.45032212736321925, 0.044834960709251276],
    [-0.49872269693596794, -0.4675241846975946, 0.06720837131208827],
    [-0.4141680507689289, -0.4819803418519688, 0.08559427425353229],
    [-0.32881754805824165, -0.4946127215056683, 0.10015925421825672],
    [-0.24234752636976317, -0.505726049080973, 0.11116192001644498],
    [-0.15456573615721822, -0.5151757586827868, 0.1187844117638911],
    [-0.0655411916982187, -0.5226148111487207, 0.12302869154502362],
    [0.024381399519744246, -0.5277286080588529, 0.123696107310355],
    [0.11466482363050667, -0.5303786543775578, 0.12044740430440351],
    [0.20471524074989686, -0.5306092010557378, 0.11292145943731667],
    [0.29401301046290856, -0.5285171868647804, 0.10087879151291468],
    [0.38218523407493127, -0.5240313355057177, 0.08433272533539866],
    [0.4689869804874284, -0.5166784376323621, 0.0636369752643495],
    [0.5541881497661791, -0.5054245173635824, 0.039511164120528706],
    [0.6373942250924983, -0.48866271977075937, 0.013001682408837877],
    [0.7178529712472712, -0.46438225942503497, -0.014609888668942006],
    [0.7943086921014902, -0.4305034532455991, -0.04192840683261652],
    [0.8649580324367618, -0.38531586801931705, -0.06757104696991284],
    [0.9275381895330593, -0.3279229506403082, -0.09027507575938043],
    [0.9795456537475085, -0.2585865991319716, -0.10897377632417352],
    [1.0185497275615247, -0.17888229195209085, -0.12283755839183426],
    [1.042538982357306, -0.09161590425514954, -0.1312869129990321],
];
#[rustfmt::skip]
pub const TARGET3D: &[[f64; 3]] = &[
    [0.32609587255870043, 0.2626914373285256, 0.9089784150350606],
    [0.32571936534594226, 0.21293078801415194, 0.9218325502984694],
    [0.33331969933294947, 0.16305982603191835, 0.928847613453589],
    [0.34841390772312664, 0.11508746928859849, 0.9299533140699584],
    [0.3701511391578805, 0.07055964566982376, 0.9254439031089463],
    [0.39741100412323294, 0.030419843956437792, 0.9158687444640323],
    [0.42892774864018146, -0.005005945613231491, 0.9018875714918078],
    [0.46341991150482403, -0.03590800224546148, 0.884129033889955],
    [0.49970490047377514, -0.06281038201825201, 0.8630875801749569],
    [0.5367817615111428, -0.08635939931270398, 0.8390809032523098],
    [0.5738724497292329, -0.10713858267724369, 0.8122718047271986],
    [0.6104205754268298, -0.12555433820572307, 0.7827395856894799],
    [0.64605498721942, -0.14181397880286414, 0.7505721906785059],
    [0.6805318597683564, -0.1559900753408399, 0.7159451966397945],
    [0.7136718831851303, -0.16813976938707914, 0.6791588002587444],
    [0.7453082153637843, -0.17843162718541145, 0.6406178221407013],
    [0.7752564671359433, -0.18723022088653962, 0.600758530835896],
    [0.803311333900808, -0.19510066469184334, 0.5599444496730993],
    [0.8292672362444712, -0.20271870630805305, 0.518365882003384],
    [0.8529542265951773, -0.21070048273565506, 0.47598076486001323],
    [0.8742768550166594, -0.2193920078482497, 0.43252628559871265],
    [0.8932433948590063, -0.2286746968604364, 0.3876131216034667],
    [0.9099757212833485, -0.2378449881087627, 0.3408914923089361],
    [0.9246953602617882, -0.24561233084248196, 0.29225633416418273],
    [0.9376874004929484, -0.2502334436044269, 0.24204378338943427],
    [0.9492495312130802, -0.24976812622010214, 0.19116723872920616],
    [0.9596370947845092, -0.24241111558252043, 0.14115031605980355],
    [0.969015917851102, -0.2268333269372142, 0.09403447272812016],
    [0.977432712016642, -0.20245986967461682, 0.052166467533315886],
    [0.9848086199422719, -0.16962332252696882, 0.017898708249681428],
    [0.9909561512902858, -0.12955654595930152, -0.006742849233009829],
    [0.9956146467959242, -0.08422379927662599, -0.02035867574184036],
    [0.9984957403491286, -0.03602394681438076, -0.02238343733934811],
    [0.9993288446840936, 0.012573229872192018, -0.0131596355380722],
    [0.997897652072071, 0.05938353940336825, 0.0061370282225536865],
    [0.9940615907544579, 0.10278764664851357, 0.03370371473112965],
    [0.9877602182588952, 0.14188283340150987, 0.0674040579187471],
    [0.9790025661108537, 0.17648746488237815, 0.10508861706561412],
    [0.9678464738273238, 0.2070119271714287, 0.14487858774285634],
    [0.9543743151898761, 0.2342382729832244, 0.18536064601911073],
    [0.9386710833238466, 0.25906753367846613, 0.22566352859309657],
    [0.9208089290163107, 0.28229508634163536, 0.26541524195795513],
    [0.9008396766006772, 0.3044610212062855, 0.3046067304606519],
    [0.878794446093577, 0.32579830272973387, 0.34340701631990245],
    [0.8546880297411757, 0.34627341460389877, 0.38198194173495176],
    [0.8285254944662224, 0.3656896670481904, 0.4203624942422836],
    [0.8003095348531846, 0.3838087718779576, 0.4583914217651292],
    [0.7700488771331631, 0.40044517518244327, 0.4957533063780479],
    [0.7377697548404917, 0.41549979598765147, 0.5320697568537842],
    [0.7035333400294346, 0.4289214806665081, 0.5670239858597663],
    [0.6674614587271693, 0.44060934517977823, 0.6004720892599323],
    [0.6297708253593312, 0.45029012548009706, 0.6325033455578977],
    [0.5908127972769335, 0.4574156832713365, 0.6634271516489747],
    [0.5511121227628268, 0.4611236369256146, 0.6936854927747869],
    [0.5113954154126141, 0.46028903450854985, 0.723711305941099],
    [0.4725991560770682, 0.45367092291324085, 0.7537689835063762],
    [0.43584855953800017, 0.44013097928894307, 0.7838193782009812],
    [0.40240271716251896, 0.4188792731794878, 0.8134464459119826],
    [0.37356743818106514, 0.3896908461028752, 0.8418675401139322],
    [0.3505839806620801, 0.3530395254675952, 0.8680283868810068],
    [0.33450788059413816, 0.31011196625980003, 0.8907624603454275],
];
