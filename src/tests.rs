#![doc(hidden)]

/// Epsilon for curve difference.
pub const EPS: f64 = 1.6e-14;
pub const RES: usize = 1000;

#[test]
fn error() {
    use crate::*;
    use ndarray::*;
    let coeff = arr2(&[[10., 20., 20., 10.], [3., 4., 4., 3.]]);
    let a = Efd2::try_from_coeffs(coeff).unwrap();
    let coeff = arr2(&[[10., 20., 20., 10.]]);
    let b = Efd2::try_from_coeffs(coeff).unwrap();
    assert_eq!(a.square_err(&b), 50.);
    assert_eq!(b.square_err(&a), 50.);
}

#[test]
fn efd2d() {
    use crate::*;
    use alloc::vec::Vec;
    use approx::assert_abs_diff_eq;
    let efd = Efd2::from_curve(PATH.closed_lin()).unwrap();
    // Test starting point
    let path = PATH
        .iter()
        .cycle()
        .skip(0)
        .take(PATH.len())
        .copied()
        .collect::<Vec<_>>();
    let efd_half = Efd2::from_curve(path.closed_lin()).unwrap();
    assert!(efd.l1_norm(&efd_half) < EPS);
    // Test transformation
    let trans = efd.as_trans();
    assert_abs_diff_eq!(trans.trans()[0], -1.248409055632365);
    assert_abs_diff_eq!(trans.trans()[1], 55.26080122817753);
    assert_abs_diff_eq!(trans.rot().angle(), 0.6423416350347734);
    assert_abs_diff_eq!(trans.scale(), 48.16765830752243);
    assert_eq!(efd.harmonic(), 6);
    // Test normalized
    let norm = efd.generate_norm(NORM.len());
    assert!(curve_diff(&norm.closed_lin(), &NORM.closed_lin()) < EPS);
    // Test reconstruction
    let target = efd.generate(TARGET.len());
    assert!(curve_diff(&target.closed_lin(), &TARGET.closed_lin()) < EPS);
}

#[test]
fn efd3d() {
    use crate::*;
    use alloc::vec::Vec;
    use approx::assert_abs_diff_eq;
    let efd = Efd3::from_curve(PATH3D.closed_lin()).unwrap();
    // Test starting point
    let path = PATH3D
        .iter()
        .cycle()
        .skip(PATH3D.len() / 2)
        .take(PATH3D.len())
        .copied()
        .collect::<Vec<_>>();
    let efd_half = Efd3::from_curve(path.closed_lin()).unwrap();
    assert!(efd.l1_norm(&efd_half) < EPS);
    // Test transformation
    let trans = efd.as_trans();
    assert_abs_diff_eq!(trans.trans()[0], 0.7239345388499508);
    assert_abs_diff_eq!(trans.trans()[1], 0.09100107896533066);
    assert_abs_diff_eq!(trans.trans()[2], 0.49979194975846675);
    assert_abs_diff_eq!(trans.rot()[0], 0.45053605532930796);
    assert_abs_diff_eq!(trans.rot()[1], 0.5163276057675052);
    assert_abs_diff_eq!(trans.rot()[2], 0.7195567430974313);
    assert_abs_diff_eq!(trans.rot()[3], 0.11252181936726506);
    assert_abs_diff_eq!(trans.scale(), 0.5629099155595344);
    assert_eq!(efd.harmonic(), 5);
    // Test normalized
    let norm = efd.generate_norm(NORM3D.len());
    assert!(curve_diff(&norm.closed_lin(), &NORM3D.closed_lin()) < EPS);
    // Test reconstruction
    let target = efd.generate(NORM3D.len());
    assert!(curve_diff(&target.closed_lin(), &TARGET3D.closed_lin()) < EPS);
}

#[test]
#[cfg(feature = "std")]
fn plot() -> Result<(), Box<dyn std::error::Error>> {
    use crate::*;
    use ndarray::*;
    use plotters::prelude::*;

    pub fn bounding_box<'a>(pts: impl IntoIterator<Item = &'a [f64; 2]>) -> [f64; 4] {
        let [mut x_min, mut x_max] = [&f64::INFINITY, &-f64::INFINITY];
        let [mut y_min, mut y_max] = [&f64::INFINITY, &-f64::INFINITY];
        for [x, y] in pts {
            if x < x_min {
                x_min = x;
            }
            if x > x_max {
                x_max = x;
            }
            if y < y_min {
                y_min = y;
            }
            if y > y_max {
                y_max = y;
            }
        }
        let dx = (x_max - x_min).abs();
        let dy = (y_max - y_min).abs();
        if dx > dy {
            let cen = (y_min + y_max) * 0.5;
            let r = dx * 0.5;
            [*x_min, *x_max, cen - r, cen + r]
        } else {
            let cen = (x_min + x_max) * 0.5;
            let r = dy * 0.5;
            [cen - r, cen + r, *y_min, *y_max]
        }
    }

    let coeff = arr2(&[[12., 35., 35., 13.], [5., 21., 21., 5.], [1., 12., 12., 1.]]);
    let efd = Efd2::try_from_coeffs(coeff).unwrap();
    let path = efd.generate(360);
    let [x_min, x_max, y_min, y_max] = bounding_box(&path);
    let b = SVGBackend::new("test.svg", (1200, 1200));
    let root = b.into_drawing_area();
    root.fill(&WHITE)?;
    let mut chart = ChartBuilder::on(&root)
        .set_label_area_size(LabelAreaPosition::Left, (8).percent())
        .set_label_area_size(LabelAreaPosition::Bottom, (4).percent())
        .margin((8).percent())
        .build_cartesian_2d(x_min..x_max, y_min..y_max)?;
    let p0 = path[0];
    chart.draw_series([Circle::new((p0[0], p0[1]), 3, BLACK.filled())])?;
    chart
        .draw_series(LineSeries::new(
            path.into_iter().map(|[x, y]| (x, y)),
            BLACK.stroke_width(3),
        ))?
        .label("Original")
        .legend(move |(x, y)| PathElement::new([(x, y), (x + 20, y)], BLACK.stroke_width(3)));
    for (p, color) in [((10., 0.), RED), ((0., 10.), BLUE)] {
        chart.draw_series(LineSeries::new([(0., 0.), p], color.stroke_width(5)))?;
    }
    let trans0 = efd.as_trans();
    let mut c0 = [0.; 2];
    for (i, c) in efd.coeffs().axis_iter(Axis(0)).enumerate() {
        let m = na::matrix![c[0], c[1]; c[2], c[3]];
        let f = |t: f64| {
            let v = m * na::matrix![t.cos(); t.sin()];
            [v[0], v[1]]
        };
        let t = Array1::linspace(0., std::f64::consts::TAU, 100);
        let trans = trans0 * Transform2::new(c0, na::UnitComplex::new(0.), 1.);
        let ellipse = t.into_iter().map(f).map(|[x, y]| {
            let [x, y] = trans.transform_pt(&[x, y]);
            (x, y)
        });
        let p1 = c0;
        c0[0] += c[0];
        c0[1] += c[2];
        let p2 = c0;
        let [x1, y1] = trans0.transform_pt(&p1);
        let [x2, y2] = trans0.transform_pt(&p2);
        chart.draw_series([Circle::new((x2, y2), 3, RED.filled())])?;
        chart.draw_series(LineSeries::new([(x1, y1), (x2, y2)], RED))?;
        chart
            .draw_series(LineSeries::new(ellipse, RED.stroke_width(3)))?
            .label(&format!("n={}", i + 1))
            .legend(move |(x, y)| PathElement::new([(x, y), (x + 20, y)], RED.stroke_width(3)));
    }
    Ok(())
}

pub const PATH: &[[f64; 2]] = &[
    [14.928108089437242, 90.01002059789568],
    [-3.25371009238094, 85.46456605244113],
    [-16.763462931659024, 76.52439024390245],
    [-39.6173464560173, 57.055475143350215],
    [-49.46583130450215, 35.085778173653246],
    [-27.739072687756586, 14.939024390243903],
    [-2.117346456017304, 19.17668726456234],
    [17.958411119740273, 37.7372933251684],
    [26.291744453073605, 57.81305090092597],
    [43.71598687731603, 68.41911150698658],
    [47.12507778640693, 80.5403236281987],
    [38.41295657428572, 90.38880847668355],
    [27.80689596822512, 91.1463842342593],
];
pub const NORM: &[[f64; 2]] = &[
    [1.119379152671337, -0.05553234647386943],
    [0.9910207666952372, 0.19246492442111932],
    [0.7433455516363754, 0.3466236207064233],
    [0.4912450590109462, 0.4662127118631491],
    [0.21253057838553358, 0.5404258318025645],
    [-0.08088496699201134, 0.5402447537989888],
    [-0.35699414927505113, 0.5234770691714837],
    [-0.6467599401741159, 0.483330568432713],
    [-0.9080511096122624, 0.3595326487685509],
    [-1.0284506874180428, 0.14947774345139578],
    [-0.9974323951564845, -0.12263773651284177],
    [-0.8623052545037516, -0.3764679704172556],
    [-0.6347643368252188, -0.5140999552626939],
    [-0.35164920002427524, -0.5670235417766133],
    [-0.06800914369245911, -0.5674017234826676],
    [0.19828936299781613, -0.45931628321452417],
    [0.4527171824458201, -0.3348867313490356],
    [0.7264030988252986, -0.32487721086570215],
    [1.0003704310053017, -0.27954637306118696],
    [1.1193791526713373, -0.0555323464738718],
];
pub const TARGET: &[[f64; 2]] = &[
    [43.52580541936114, 85.41974003908122],
    [31.41914569934586, 91.2805058483037],
    [17.418517196895017, 90.07914804660189],
    [4.244753253462857, 87.41682783854023],
    [-8.646084287386033, 82.23649438254617],
    [-19.957195505252518, 73.7627420984368],
    [-30.122220256970994, 65.14867465329937],
    [-40.13933107431942, 55.23886845955356],
    [-46.64440712361967, 42.92448766942674],
    [-45.226608554249765, 31.348934230012294],
    [-36.17817108831738, 21.749151088169825],
    [-23.642141300790406, 15.858740317938057],
    [-10.894937602526898, 17.11650068817552],
    [1.5512941624695515, 23.24490544911555],
    [12.501526069295421, 31.415007924947],
    [19.653120825390836, 43.267887138455805],
    [25.87526755420776, 55.40858035781829],
    [36.1418456145505, 63.692076052934084],
    [45.40004894143899, 73.34595105201664],
    [43.52580541936122, 85.41974003908112],
];
#[rustfmt::skip]
pub const PATH_OPEN: &[[f64; 2]] = &[
    [0.028607755880487345, 47.07692307692308],
    [6.182453909726641, 52.76923076923077],
    [14.797838525111256, 57.07692307692308],
    [24.643992371265103, 58.61538461538461],
    [41.10553083280357, 59.07692307692308],
    [50.18245390972664, 56.76923076923077],
    [60.6439923712651, 51.53846153846154],
    [65.41322314049587, 46.0],
    [68.79783852511126, 36.92307692307692],
    [67.41322314049587, 25.384615384615383],
    [60.6439923712651, 18.153846153846153],
];
#[rustfmt::skip]
pub const PATH3D: &[[f64; 3]] = &[
    [0.6999100262927096,0.43028119112952473,0.5700737247541725],
    [0.6296590344074013,0.4512760872295425,0.6323601770225047],
    [0.5638138739696974,0.46183051089148464,0.6847090584540213],
    [0.5058369206546075,0.4615280764519245,0.7287803814245077],
    [0.45702863707701546,0.4510622388540364,0.7665948614304103],
    [0.41723197726966244,0.4317766784472379,0.799678921250722],
    [0.3856541747672426,0.40523683682222406,0.8288871838597307],
    [0.3614034251971859,0.3729768425814701,0.8545617819407205],
    [0.3437381466626122,0.33639334903869056,0.8767460300745514],
    [0.3321447389761846,0.29671906154191235,0.8953422088163436],
    [0.3263372629749841,0.25502826620566654,0.9102002934684913],
    [0.32622858809088523,0.21225076122841705,0.9211539082423659],
    [0.3318929803861661,0.16918542545203516,0.928021196624841],
    [0.34352480290022414,0.1265118028240236,0.9305834049340109],
    [0.36139084538662236,0.08480105307198857,0.9285501808026447],
    [0.38577056486989364,0.04452862638492877,0.9215195454857344],
    [0.41687739559371884,0.0060909757379047635,0.9089423177834546],
    [0.45475516434546037,-0.030172412132808968,0.8901052556002697],
    [0.49914754370187137,-0.06395289690096129,0.8641537806399759],
    [0.5493470560271839,-0.09494849409160033,0.8301822664355119],
    [0.6040449685807827,-0.1228552958162816,0.7874238072487618],
    [0.6612249903953387,-0.14739768525858138,0.7355647044666407],
    [0.7181712990997067,-0.1684251622294386,0.6751762361616609],
    [0.7716940290779204,-0.18608109658863914,0.6081629312757029],
    [0.8186957920221034,-0.20095221972437277,0.5379176568148215],
    [0.8570911228971989,-0.21393997152327254,0.46864111603170266],
    [0.88661962597743,-0.2256744734813517,0.403703691896119],
    [0.9087058112647335,-0.2359493070484034,0.3443568978212587],
    [0.9253987983439792,-0.24384980367577586,0.29012813939844717],
    [0.9384640530551117,-0.24830445184260166,0.24006274246229356],
    [0.9491216566898215,-0.2484529388271337,0.19349216519158882],
    [0.9581400770939057,-0.2437369857356437,0.1501994489037393],
    [0.9659871776934699,-0.2338686278496317,0.11033692690815355],
    [0.9729414021915203,-0.21877677851516128,0.07430847249221559],
    [0.979158591144934,-0.1985626427303512,0.04267704651223003],
    [0.984708076435491,-0.17346680001041803,0.0161019718314504],
    [0.9895891445905367,-0.1438444290548901,-0.004701610196814504],
    [0.9937341248474196,-0.11014503640716575,-0.01898841932855333],
    [0.997000753888979,-0.07289400668205587,-0.02599924103976281],
    [0.9991540450179144,-0.03267407497300495,-0.024971967263275538],
    [0.9998362404365794,0.009894685600921771,-0.015152145277328999],
    [0.9985225360959517,0.05417737861443478,0.004190054292864898],
    [0.9944609178696164,0.09954962956012486,0.03372468064136638],
    [0.9865989401537969,0.14542428454053347,0.07398857177482451],
    [0.9735136458469561,0.19127348741773503,0.12524230260109778],
    [0.9533914378420906,0.2366305939786505,0.18721839718014333],
    [0.9241589851285424,0.2810406966408692,0.25873982499375203],
    [0.8839235581077262,0.32391579444519214,0.33727985639690555],
    [0.8318395864591331,0.36427712952733915,0.4187422540212782],
    [0.7691918202384619,0.4004903064827955,0.49794724428553494],
];
#[rustfmt::skip]
pub const NORM3D: &[[f64; 3]] = &[
    [0.9800783192612248, 0.26481074731680326, -0.3004212875498144],
    [0.936330927671103, 0.3238557580152004, -0.3571167614564505],
    [0.8784644044001587, 0.37834187907070066, -0.4033627930839039],
    [0.8092821826048603, 0.4262472077838802, -0.43747522186357796],
    [0.7317885703350653, 0.46631192095965357, -0.4588287817413359],
    [0.6488024151399256, 0.49802957159333844, -0.467889483134639],
    [0.5626612795418232, 0.5214900495855321, -0.46605707624827364],
    [0.4750680029673202, 0.537135445429184, -0.45535659893990144],
    [0.38709333187006567, 0.5455064741933224, -0.43805277986684893],
    [0.29930856050597354, 0.547051139336525, -0.41627727931868636],
    [0.21199144051929955, 0.5420415247202399, -0.3917520933230651],
    [0.12533499337646378, 0.5306070556918219, -0.36566458349964764],
    [0.03959554735050801, 0.5128544817602849, -0.3387077965326614],
    [-0.04485904794433023, 0.48901740201801425, -0.3112550168437808],
    [-0.12760482595274356, 0.4595694016121658, -0.28360172688957064],
    [-0.20828891665794028, 0.4252473699679005, -0.25619091872302013],
    [-0.28677117159251564, 0.3869617116142162, -0.22974373899408346],
    [-0.3632148458120852, 0.3456091095927009, -0.20524532431524448],
    [-0.43807336762792576, 0.3018396727241703, -0.18377811199902397],
    [-0.5119499505346973, 0.2558526023074631, -0.16624062738506107],
    [-0.5853458834313198, 0.20729552456803446, -0.15302644521577996],
    [-0.6583509275911058, 0.15532078632663218, -0.14375559069608868],
    [-0.7303545590515831, 0.09881220816518467, -0.1371438706963348],
    [-0.7998620383478019, 0.036748238968274546, -0.1310656140604397],
    [-0.864481878652469, -0.0313749917659465, -0.12281926406014504],
    [-0.9211146568636379, -0.10516252737472975, -0.10955470634576964],
    [-0.9663259619782383, -0.18308337405724603, -0.08877897565456319],
    [-0.9968403618507814, -0.2624528868628376, -0.058833940610429916],
    [-1.010060390181654, -0.33966292483117533, -0.019241817652456788],
    [-1.004503459052894, -0.41063059060475554, 0.029158344051142936],
    [-0.9800636663664675, -0.47138333253734394, 0.0843142856395697],
    [-0.9380417559724217, -0.5186629664005123, 0.14328224384742405],
    [-0.8809364435012993, -0.5504230418891449, 0.20269719933559402],
    [-0.8120419179676895, -0.5661155112196465, 0.25929158979022865],
    [-0.7349371320099732, -0.5667089717946967, 0.3103558353316843],
    [-0.6529728163922245, -0.5544406872340457, 0.3540523165721379],
    [-0.5688575038459176, -0.5323635048237939, 0.3895323137635582],
    [-0.48441601170586746, -0.5037923013064889, 0.4168528633821134],
    [-0.4005503408676477, -0.47177224760801, 0.4367354894740109],
    [-0.3173850512948495, -0.4386791156697814, 0.4502404007769061],
    [-0.23453888891791166, -0.40602372270674003, 0.4584409697507325],
    [-0.15144143863076448, -0.37447862178150093, 0.46217265075626396],
    [-0.06761274540275364, -0.344089353426845, 0.46190222041189233],
    [0.017155877186380956, -0.3145892049561513, 0.4577260011698543],
    [0.10274680511354814, -0.2857162163648203, 0.4494701477795919],
    [0.1887745862557121, -0.2574386234103707, 0.436841721786744],
    [0.2747131224625481, -0.2300272241546995, 0.4195721637102491],
    [0.36002957155231957, -0.2039610124518972, 0.3975058026740359],
    [0.4442655545754087, -0.1797026261865039, 0.3706109269951214],
    [0.5270272266779896, -0.1574191041898853, 0.3389215327270232],
    [0.6078786789351804, -0.1367407413609916, 0.30244457069835495],
    [0.6861682011467316, -0.11664201185163897, 0.2610820410484959],
    [0.7608437962049766, -0.0954961736801778, 0.2146150405654104],
    [0.8303249444685874, -0.07130813259436858, 0.16277826180771235],
    [0.89248846116658, -0.042081142646352585, 0.10542378957977129],
    [0.9447993885181725, -0.006235103542088298, 0.04274106984454162],
    [0.9845802354123069, 0.03702234183599591, -0.024524686576892205],
    [1.0093736448491006, 0.08746164559934493, -0.09492280219057996],
    [1.017325212231759, 0.14379165170820316, -0.16627370695080956],
    [1.007502673698483, 0.20382506882044168, -0.2358023708513325],
    [0.9800783192612222, 0.26481074731680776, -0.30042128754981895],
];
#[rustfmt::skip]
pub const TARGET3D: &[[f64; 3]] = &[
    [0.3260958725587006, 0.2626914373285255, 0.9089784150350604],
    [0.3257814466312376, 0.21209446971312595, 0.9219980701322934],
    [0.33370591212609374, 0.161420097024903, 0.9289789475392047],
    [0.349351410477721, 0.11276885734180078, 0.9298574446613909],
    [0.3718101631920917, 0.06774034427097295, 0.924956117867235],
    [0.39989272818276217, 0.02728727943819627, 0.9148627028403551],
    [0.4322636914587479, -0.008292997869433522, 0.9002722429907237],
    [0.4675818566515594, -0.039240616376117504, 0.881835639951316],
    [0.5046220619146036, -0.06612994872822467, 0.8600531121510556],
    [0.5423604777287174, -0.08964059239897734, 0.8352357460837864],
    [0.5800135236278519, -0.11036408928771571, 0.8075371011536572],
    [0.6170304843591229, -0.12869333227350976, 0.777035853915857],
    [0.6530492512622788, -0.14481468265426656, 0.7438357974312978],
    [0.6878312925794869, -0.15879115629786322, 0.708145382500883],
    [0.7211945715146565, -0.17069749625584285, 0.6703066119397452],
    [0.7529612825727691, -0.18075226225800128, 0.6307602986825889],
    [0.7829316324698206, -0.1893927053793093, 0.5899564839232164],
    [0.8108869979393252, -0.19725513489332835, 0.5482387547348461],
    [0.8366176732823793, -0.20505217114689456, 0.5057432310505892],
    [0.8599640687891228, -0.2133708277792789, 0.46235312409291035],
    [0.880857111641653, -0.22244267005898954, 0.4177372843268643],
    [0.899344343968094, -0.2319514836972571, 0.37147890808138817],
    [0.9155924352968428, -0.24094048514036043, 0.3232743016349143],
    [0.9298633028955572, -0.24786029816941152, 0.2731584558798581],
    [0.9424680252852649, -0.2507655976866892, 0.22170079993152336],
    [0.9537084491736221, -0.24763084111678207, 0.17011517965093786],
    [0.9638194363039791, -0.23672354810738633, 0.1202435704300377],
    [0.9729244187208097, -0.21695561008808695, 0.07440011252482204],
    [0.9810135438902163, -0.18813411787982998, 0.035094402024369364],
    [0.987948186510585, -0.15105338988136394, 0.004682624802951119],
    [0.9934894592013291, -0.10740456476798621, -0.01498544923140166],
    [0.9973431296794861, -0.059519868512044105, -0.02285154186080618],
    [0.9992102838057669, -0.010005484778035659, -0.018806669388064634],
    [0.9988327719443518, 0.03865914657889328, -0.0036890676835222846],
    [0.9960248012457309, 0.08447250839867462, 0.020875901585369727],
    [0.9906861825329879, 0.12614389474817161, 0.05275805449015908],
    [0.9827974905407911, 0.1631692023037553, 0.0896657748393162],
    [0.9724014763633637, 0.19574859718182572, 0.1294786469627346],
    [0.9595775003638258, 0.22458102727431437, 0.17050366370933123],
    [0.9444160952610356, 0.2505958871622669, 0.21161051023494776],
    [0.9269992134517724, 0.2746909442880494, 0.2522320007351956],
    [0.907388979738736, 0.29753648855138554, 0.29224793252680825],
    [0.8856248616097705, 0.3194818829678539, 0.33179642444424984],
    [0.8617270456027546, 0.3405693118917301, 0.37107007207108433],
    [0.835703094088533, 0.36062935397607104, 0.4101522063992834],
    [0.8075557508948537, 0.37941222388457513, 0.44893242418187285],
    [0.7772916182043672, 0.39670247982796136, 0.4871152024217216],
    [0.7449324952165187, 0.4123748148498809, 0.5243078993149496],
    [0.7105324855268165, 0.426370920089645, 0.5601522002656663],
    [0.6742037832861631, 0.4386055418528865, 0.5944518853784294],
    [0.6361520526183954, 0.4488354162901012, 0.6272523465314275],
    [0.5967188487230255, 0.4565402000102842, 0.6588424757552626],
    [0.5564244889989493, 0.4608651463718904, 0.6896728968892016],
    [0.5160014095998302, 0.46066061244683515, 0.7202094111211095],
    [0.4764065777734245, 0.4546273610887978, 0.7507600608276475],
    [0.4388028397427063, 0.441546179095824, 0.7813230387048908],
    [0.4045033641219956, 0.420544043016396, 0.8114984239457887],
    [0.37487998820812474, 0.39133442311780836, 0.840490645062137],
    [0.3512439681218598, 0.3543707641829719, 0.8672050893497935],
    [0.33471462152407716, 0.310869854836448, 0.8904178079577802],
    [0.3260958725587004, 0.26269143732852185, 0.9089784150350618],
];
